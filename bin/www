#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../main');
var debug = require('debug')('app:server');
var http = require('http');
const sequelize = require('../models').sequelize;

/**
 * Get port from environment and store in Express.
 */
var port = normalizePort(process.env.PORT || '4000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */
//sync 내의 force:true 는, 이미 있는 테이블을 내리고, 지금 설정되어있는 테이블을 올리도록 강요한다.
console.log(`outside sync port: ${port}`)

// Foreign key constraints 를 무효화 시키는 코드
sequelize.query('SET FOREIGN_KEY_CHECKS = 0', {raw: true}).then(()=>{
  //있는 테이블을 다 내리고 지금 테이블로 올리려면 -> sync({force:true}) 적용
  sequelize.sync({force:false}).then(function(){
    console.log(`inside sync port: ${port}`)
    server.listen(port);
  })
})


server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
